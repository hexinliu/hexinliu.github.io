<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Welcome</title>
    <link>https://hexinliu.github.io/</link>
    <description>Recent content on Welcome</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Feb 2020 13:32:54 +0800</lastBuildDate>
    
	<atom:link href="https://hexinliu.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[数据结构]链表  环形链表2</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82/</link>
      <pubDate>Mon, 03 Feb 2020 13:32:54 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A82/</guid>
      <description>[数据结构]链表&amp;ndash;环形链表2  题目描述 给定一个链表，返回链表开始入环的第一个结点。如果链表无环，则返回null。
为了表示给定链表中的环，这里使用pos来表示链表尾连接到链表中的位置(索引从0开始)。如果pos是-1，则在该链中没有环。(不能修改给定的链表)
示例1： 输入：head = [3,2,0,-4], pos = 1 输出：tail connects to node index 1 解释：链表中有一个环，其尾部连接到第二个节点。 示例2： 输入：head = [1,2], pos = 0 输出：tail connects to node index 0 解释：链表中有一个环，其尾部连接到第一个节点。 示例3： 输入：head = [1], pos = -1 输出：no cycle 解释：链表中没有环。 算法（双指针）： 快指针每次走两步，慢指针每次走一步，因此快指针走过的路程f一定是慢指针走过路程s的两倍，即f = 2s;假设从链表头到环入口的距离为a，环长度为b，则当快慢指针第一次相遇时，快指针一定比慢指针多走了n个环的长度，即f - s = nb；由这两个式子可以得到第一次相遇时慢指针走了nb的距离。易得环入口一定是a+nb，因此再让慢指针走a步，一定是环入口的位置。
题解： public class Solution { public ListNode detectCycle(ListNode head) { if (head == null || head.next == null) return null; ListNode fast = head; ListNode slow = head; while (true) { if (fast == null || fast.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  复制带随机指针的链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sun, 02 Feb 2020 15:43:30 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 给定一个链表，每个结点包含一个额外增加的随机指针，该指针可以指向链表中的任何结点或空节点。
要求返回这个链表的深拷贝
现在用一个由n个结点组成的链表来表示输入/输出中的链表。每个结点用一个[val，random_index]表示：
 val：一个表示node.val的整数。 random_index：随机指针指向的结点索引(范围从0到n-1)；如果不指向任何结点，则为null。  示例1： 输入：head = [[7,null],[13,0],[11,4],[10,2],[1,0]] 输出：[[7,null],[13,0],[11,4],[10,2],[1,0]] 示例2： 输入：head = [[1,1],[2,1]] 输出：[[1,1],[2,1]] 示例3： 输入：head = [] 输出：[] 解释：给定的链表为空（空指针），因此返回 null。 算法： 题解： class Solution { public Node copyRandomList(Node head) { if (head == null) return null; Node ptr = head; //在原链表每个结点后面创建一个新结点(新结点的val和原结点相同)  while (ptr != null) { Node newnode = new Node(ptr.val); //若原链表为A-&amp;gt;B-&amp;gt;C-&amp;gt;null  //则新链表为A-&amp;gt;A&amp;#39;-&amp;gt;B-&amp;gt;B&amp;#39;-&amp;gt;C-&amp;gt;C&amp;#39;-&amp;gt;null  newnode.next = ptr.next; ptr.next = newnode; ptr = newnode.next; } ptr = head; //为链表中新结点的random指针赋值，让其指向对应的新结点（对应关系等同于源结点中的关系）  while (ptr !</description>
    </item>
    
    <item>
      <title>[数据结构]链表  有序链表转换二叉搜索树2</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%912/</link>
      <pubDate>Sat, 01 Feb 2020 13:10:34 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%912/</guid>
      <description>题目描述 给定一个单链表，其中的元素按升序排列，将其转换为高度平衡的二叉搜索树。
示例： 给定的有序链表： [-10, -3, 0, 5, 9], 一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树： 0 / \ -3 9 / / -10 5 算法： 上次用的是递归方法，这次用递归+数组的方法。首先将给定的链表转为数组，用left和right分别表示数组的头和尾，则数组的中间元素为(left+right)/2，时间开销为O(1)，同理，将中间元素作为二叉搜索树的根，递归的构造二叉搜索树的两颗子树，分别为(left，mid)，(mid+1，right)。空间换时间的经典案例
题解： class Solution { private List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); //将链表转换为数组  private void listToArray(ListNode head) { while (head != null) { this.list.add(head.val); head = head.next; } } //得到中间结点并递归的构造左右子树  private TreeNode listToBST(int left, int right) { if (left &amp;gt; right) return null; int mid = (left + right)/2; TreeNode node = new TreeNode(this.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  有序链表转换二叉搜索树</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
      <pubDate>Fri, 31 Jan 2020 12:31:13 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%8D%A2%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
      <description>题目描述 给定一个单链表，其中的元素按升序排列，将其转换为高度平衡的二叉搜索树。
示例： 给定的有序链表： [-10, -3, 0, 5, 9], 一个可能的答案是：[0, -3, 9, -10, null, 5], 它可以表示下面这个高度平衡二叉搜索树： 0 / \ -3 9 / / -10 5 算法： 由于给定链表中的元素是升序排列的，所以需要将中间元素作为二叉搜索树的根(可以使用快慢指针找到中间元素)，中间元素左侧的所有元素去构造左子树，右侧所有元素去构造右子树，这将保证最后构造出来的二叉树是平衡的。
题解： class Solution { private ListNode findMiddleElement(ListNode head) { ListNode pre_str = null; ListNode slow_str = head; ListNode fast_str = head; //找到中间结点  while (fast_str != null &amp;amp;&amp;amp; fast_str.next != null) { pre_str = slow_str; slow_str = slow_str.next; fast_str = fast_str.next.next; } //从中间结点之前断开  if (pre_str !</description>
    </item>
    
    <item>
      <title>[数据结构]链表  反转链表2</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A82/</link>
      <pubDate>Thu, 30 Jan 2020 16:04:16 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A82/</guid>
      <description>[数据结构]链表&amp;ndash;反转链表2  题目描述 反转从位置m到n的链表，使用一趟扫描完成。(1≤m≤n≤链表长度)
示例： 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, m = 2, n = 4 输出: 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;NULL 算法1(循环)： 遍历链表，将当前结点的next指向当前结点的前一个结点，由于结点定义时没有定义前驱指针，故必须提前保存当前结点的前一个结点，在进行更改之前，还需保存当前结点的下一个结点。
题解： class Solution { // Object level variables since we need the changes  // to persist across recursive calls and Java is pass by value.  private boolean stop; private ListNode left; public void recurseAndReverse(ListNode right, int m, int n) { // base case. Don&amp;#39;t proceed any further  if (n == 1) { return; } // Keep moving the right pointer one step forward until (n == 1)  right = right.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  分隔链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Wed, 29 Jan 2020 19:16:32 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 给定一个链表和一个特定值x，对链表进行分隔，使得所有小于x的结点都在大于或等于x的结点之前。(保留两个分区中每个结点的初始相对位置)
示例： 输入: head = 1-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;5-&amp;gt;2, x = 3 输出: 1-&amp;gt;2-&amp;gt;2-&amp;gt;4-&amp;gt;3-&amp;gt;5 算法： 本题要求修改链表结构，使得小于x的元素位于值大于等于x的元素之前，这意味着在改变后的链表中存在某个点，这个点之前的元素小于x，之后的元素大于x。按照这个规律，可以按顺序遍历原链表并将其拆分，小于x的放入一个链表，大于x的放入另一个链表，最后将两个链表拼接。
方法：双指针法。初始化两个指针before和after，将其都初始化为哑结点(可以减少条件判断)。遍历原链表，若值小于x，将其连到before后面，大于等于x，将其连到after后面。最后将链表拼接，并返回拼接后链表的头结点。
题解： class Solution { public ListNode partition(ListNode head, int x) { //初始化两个哑结点  ListNode before_head = new ListNode(0); ListNode before = before_head; ListNode after_head = new ListNode(0); ListNode after = after_head; //遍历给定链表，根据值的大小将其分别链到不同的链表后面  while (head != null) { if (head.val &amp;lt; x) { before.next = head; before = before.next; } else { after.next = head; after = after.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  删除排序链表中的重复元素2</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A02/</link>
      <pubDate>Tue, 28 Jan 2020 22:39:50 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A02/</guid>
      <description>题目描述 给定一个排序链表，删除所有含有重复数字的结点，只保留原始链表中没有重复出现的数字。
示例1： 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;3-&amp;gt;4-&amp;gt;4-&amp;gt;5 输出: 1-&amp;gt;2-&amp;gt;5 示例2： 输入: 1-&amp;gt;1-&amp;gt;1-&amp;gt;2-&amp;gt;3 输出: 2-&amp;gt;3 算法： 一般思路，从链表头部开始判断，如果出现两个及以上连续的值，将值记录下来，继续向后判断直至出现一个不同的值，将前一部分的next直接指向新的值，在从新的值继续向后判断；为了避免开头就出现连续的值，需要设置一个伪头(哨兵结点)。
题解： class Solution { public ListNode deleteDuplicates(ListNode head) { ListNode sentinel = new ListNode(0); sentinel.next = head; ListNode cur = sentinel; ListNode pre; while (cur != null) { pre = cur; cur = cur.next; while (cur != null &amp;amp;&amp;amp; cur.next != null &amp;amp;&amp;amp; cur.val == cur.next.val) { int flag = cur.val; while (cur != null &amp;amp;&amp;amp; cur.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  旋转链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 27 Jan 2020 22:01:01 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>题目描述 给定一个链表，旋转链表，将链表每个结点向右移动k个位置，其中k非负。
示例1： 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL, k = 2 输出: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL 解释: 向右旋转 1 步: 5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;NULL 向右旋转 2 步: 4-&amp;gt;5-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;NULL 示例2： 输入: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL, k = 4 输出: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL 解释: 向右旋转 1 步: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL 向右旋转 2 步: 1-&amp;gt;2-&amp;gt;0-&amp;gt;NULL 向右旋转 3 步: 0-&amp;gt;1-&amp;gt;2-&amp;gt;NULL 向右旋转 4 步: 2-&amp;gt;0-&amp;gt;1-&amp;gt;NULL 算法： 不论链表结点向右移动几次，其实都是将链表连成一个环，再找到一个新的位置断开链表。
题解： class Solution { public ListNode rotateRight(ListNode head, int k) { if (head == null) return null; if (head.next == null) return head; //统计链表结点个数，并将链表连成一个环  ListNode old_tail = head; int n; for(n = 1; old_tail.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  两两交换链表中的结点</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</link>
      <pubDate>Sun, 26 Jan 2020 18:49:20 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E7%BB%93%E7%82%B9/</guid>
      <description>题目描述 给定一个链表，两两交换其中相邻的结点，并返回交换后的链表。不能只是单纯的改变结点内部的值，需要实际的进行结点交换。
示例： 给定 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, 你应该返回 2-&amp;gt;1-&amp;gt;4-&amp;gt;3. 算法1： 题解： class Solution { public ListNode swapPairs(ListNode head) { ListNode pre = new ListNode(0); pre.next = head; ListNode temp = pre; while(temp.next != null &amp;amp;&amp;amp; temp.next.next != null) { ListNode start = temp.next; ListNode end = temp.next.next; temp.next = end; start.next = end.next; end.next = start; temp = start; } return pre.next; } } 复杂度：  时间复杂度：O(n)，假设链表长度为n。 空间复杂度：O(1)。   做这个题的过程中参考答案时发现了还有递归解法，还不理解这个过程，先记录下来。
这个题目中作者给了一些关于递归的解题思路，觉得挺不错，记录下来：递归写法要观察本级递归的解决过程，形成抽象模型，而不是去思考一级又一级完整的调用栈，而无从下手。递归需要注意三个方面：1.返回值 2.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  删除链表的倒数第N个结点</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</link>
      <pubDate>Sat, 25 Jan 2020 16:22:02 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACn%E4%B8%AA%E7%BB%93%E7%82%B9/</guid>
      <description>题目描述 给定一个链表，删除链表倒数第n个结点，并返回链表的头结点。
示例： 给定一个链表: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&amp;gt;2-&amp;gt;3-&amp;gt;5. 算法： 解这个题目时，比较容易想到的是遍历两次链表，第一次遍历找出倒数第n个结点(即正数第L-n+1个结点)，第二次遍历让其前一个结点的指针指向下下一个结点。难在尝试用一次遍历来完成整个过程，方法：定义两个指针，两个指针间隔为n，保持这种间隔移动两个指针，当前一个指针为null时，则后一个指针指向的则是要删除结点的前一个结点，直接修改其next即可。
题解： class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode cur = new ListNode(0); cur.next = head; ListNode p = cur; ListNode q = cur; int flag = 0; //让两个指针间隔为n  while (flag != n+1) { q = q.next; flag++; } //移动两个指针直到前一个指针为null  while (q != null) { p = p.next; q = q.next; } p.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  两数相加</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</link>
      <pubDate>Fri, 24 Jan 2020 12:55:11 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</guid>
      <description>题目描述 给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。
如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。
您可以假设除了数字 0 之外，这两个数都不会以 0 开头。
示例： 输入：(2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4) 输出：7 -&amp;gt; 0 -&amp;gt; 8 原因：342 + 465 = 807 算法： 对两个链表进行遍历，每一位进行相加，相加时需要考虑上一位的进位。每次计算完一次相加后，更新进位的值。需要注意的是，对于需要返回头结点的链表，在操作前需要初始化一个预先指针pre，pre.next指向真正的head。使用预先指针的目的在于链表初始化时无可用结点值，而在构造链表的过程中需要移动指针，这样可以防止头结点丢失。
题解： class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode l3 = new ListNode(0); ListNode cur = l3; int carry = 0; while (l1 != null || l2 != null) { int x = l1 == null ?</description>
    </item>
    
    <item>
      <title>[数据结构]链表  二进制链表转整数</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0/</link>
      <pubDate>Thu, 23 Jan 2020 14:00:13 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E4%BA%8C%E8%BF%9B%E5%88%B6%E9%93%BE%E8%A1%A8%E8%BD%AC%E6%95%B4%E6%95%B0/</guid>
      <description>题目描述 给一个单链表的引用结点head，链表中每个结点的值为0或1，此链表是一个整数的二进制表示形式，写程序返回该链表所表示数字的十进制值。
示例1： 输入：head = [1,0,1] 输出：5 解释：二进制数 (101) 转化为十进制数 (5) 示例2： 输入：head = [0,0] 输出：0 示例3： 输入：head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0] 输出：18880 算法： 由于链表存储的二进制位是从高位到低位，使用二进制转十进制的方法，转为这个过程，让其从高位开始乘2。一边遍历，一边得到值。
题解： class Solution { public int getDecimalValue(ListNode head) { int sum = 0; while (head != null) { sum = sum*2 + head.val; head = head.next; } return sum; } } 复杂度：  时间复杂度：假设链表长度为n，则为O(n) 空间复杂度：O(1)  </description>
    </item>
    
    <item>
      <title>[数据结构]链表  删除链表中的一个结点</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%93%E7%82%B9/</link>
      <pubDate>Wed, 22 Jan 2020 14:16:23 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E4%B8%80%E4%B8%AA%E7%BB%93%E7%82%B9/</guid>
      <description>[数据结构]链表&amp;ndash;删除链表中的一个结点  题目描述 请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点，你将只被给定要求被删除的节点。
现有一个链表 &amp;ndash; head = [4,5,1,9]，它可以表示为:
示例1： 输入: head = [4,5,1,9], node = 5 输出: [4,1,9] 解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&amp;gt; 1 -&amp;gt; 9. 要求：
 链表至少包含两个结点 链表中所有结点的值都是唯一的 给定的结点不是末尾结点并且一定是链表中的一个有效结点 不从函数中返回任何结果  算法： (这道题最初做的时候总想着让给定结点的前一个结点直接指向后一个结点，但由于该函数的参数并没有给定链表，所以无法获取给定结点的前一个结点，后来想到给链表局部反转再直接指向下一个，但还是需要前一个结点)
所以只能依次用所给结点后面的值代替前面的值，完成删除给定结点。
题解1： class Solution { public void deleteNode(ListNode node) { ListNode pre = null; while (node.next != null) { node.val = node.next.val; pre = node; node = node.next; } pre.next = null; } }  答案确实更简洁，确实没想到 ，记录一下。</description>
    </item>
    
    <item>
      <title>[数据结构]链表  回文链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 21 Jan 2020 13:06:03 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</guid>
      <description>[数据结构]链表&amp;ndash;回文链表  题目描述 判断一个链表是不是回文链表
示例1： 输入: 1-&amp;gt;2 输出: false 示例2： 输入: 1-&amp;gt;2-&amp;gt;2-&amp;gt;1 输出: true 算法1(复制到数组然后用双指针)： 由于直接用链表操作并不简单，而用数组实现判断回文很会简单，首先考虑到用数组。将链表中的元素复制到数组中，然后利用两个指针，一个从前向后移动，一个从后向前移动，依次判断是否相等。
题解： class Solution { public boolean isPalindrome(ListNode head) { List&amp;lt;Integer&amp;gt; list = new ArrayList&amp;lt;&amp;gt;(); while(head != null) { list.add(head.val); head = head.next; } int first = 0; int last = list.size()-1; while (first &amp;lt; last) { if (! list.get(first).equals(list.get(last))) return false; first++; last--; } return true; } } 复杂度：  时间复杂度：O(n)，复制到数组O(n)，双指针移动O(n)，共O(2n)，即O(n)。 空间复杂度：O(n) ,用了一个数组存放n个链表元素。   算法2(快慢指针)： 由于需要比较前后两段的结点中的值是否相同，故先要将想办法将链表分成前后两段。可以使用快慢两个指针，慢指针每次走一步，快指针每次走两步，则当快指针走到链表结尾时，慢指针刚好走到链表中部。然后将其中一部分反转与另一部分比较。</description>
    </item>
    
    <item>
      <title>[数据结构]链表  反转链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Mon, 20 Jan 2020 20:01:25 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</guid>
      <description>[数据结构]链表&amp;ndash;反转链表  题目描述 反转一个单链表
示例： 输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL 输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL 算法1(循环)： 遍历链表，将当前结点的next指向当前结点的前一个结点，由于结点定义时没有定义前驱指针，故必须提前保存当前结点的前一个结点，在进行更改之前，还需保存当前结点的下一个结点。
题解： class Solution { public ListNode reverseList(ListNode head) { ListNode pre = null; ListNode current = head; ListNode next = null; while (current != null) { next = current.next; current.next = pre; pre = current; current = next; } return pre; } } 复杂度：  时间复杂度：假设链表长度为n，则为O(n) 空间复杂度：O(1)   算法2(递归)： 假设链表是[1, 2, 3, 4, 5]从最底层最后一个reverseList(5)来看
 返回了5这个节点 reverseList(4)中 p为5 head.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  移除链表元素</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</link>
      <pubDate>Sun, 19 Jan 2020 22:16:14 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</guid>
      <description>[数据结构]链表&amp;ndash;移除链表元素  题目描述 删除链表中等于给定值val的所有值。
示例： 输入: 1-&amp;gt;2-&amp;gt;6-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;6, val = 6 输出: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5 算法(哨兵结点)： 初始化一个哨兵结点作为伪头，初始化两个指针分别指向当前结点和当前结点的前驱结点。比较当前结点的值和给定的值，若相等，让前驱结点的next指向当前结点的next；若不相等，让当前结点作为前驱结点。当前结点向后移动，继续判断。
题解： class Solution { public ListNode removeElements(ListNode head, int val) { ListNode sentinel = new ListNode(-1); sentinel.next = head; ListNode current = head; ListNode pre = sentinel; while (current != null ) { if (current.val == val) pre.next = current.next; else pre = current; current = current.next; } return sentinel.next; } }  这个题目如果要删除的结点是中间结点，会很简单；但如果删除的是位于链表头部的一个或多个结点，会很复杂。这里遇到一个重要的思想：哨兵结点
​	哨兵节点广泛应用于树和链表中，如伪头、伪尾、标记等，它们是纯功能的，通常不保存任何数据，其主要目的是使链表标准化，如使链表永不为空、永不无头、简化插入和删除。</description>
    </item>
    
    <item>
      <title>[数据结构]链表  相交链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Sat, 18 Jan 2020 14:11:46 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</guid>
      <description>[数据结构]链表&amp;ndash;相交链表  题目描述 编写一个程序，找到两个单链表相交的起始结点。（可假定两个链表中都没有环）
如下面的两个链表**：**

在节点 c1 开始相交。
示例1： 
输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3 输出：Reference of the node with value = 8 输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。``` 示例2： 
输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1 输出：Reference of the node with value = 2 输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例3：</description>
    </item>
    
    <item>
      <title>[数据结构]链表  环形链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Fri, 17 Jan 2020 15:34:55 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</guid>
      <description>[数据结构]链表&amp;ndash;环形链表  题目描述 给定一个链表，判断链表中是否有环。
算法1（哈希表）： 遍历所有结点，然后在哈希表中存储每个结点的引用，当检测到空节点null时，说明已经检测到最后一个结点，并且该链表中没有环。若当前结点的引用已存在于哈希表中，说明有环。（检查一个结点此前是否被访问过）
题解： public class Solution { public boolean hasCycle(ListNode head) { Set&amp;lt;ListNode&amp;gt; set = new HashSet&amp;lt;&amp;gt;(); while(head != null) { if (set.contains(head)) { return true; } else set.add(head); head = head.next; } return false; } } 复杂度：  时间复杂度：O(n)，对于含有n个元素的链表，每个元素最多访问一次，往哈希表中添加一个元素最多花费O(1)时间。 空间复杂度：O(n)，空间取决于添加到哈希表中的元素数目。最多可以添加n个元素。  算法2（双指针）： 使用具有不同速度的快、慢两个指针，快指针每次走两步，慢指针每次走一步。考虑一个环形链表，把快慢指针想象成在环形跑道上跑步的运动员，快跑者一定能追上慢跑者。时间允许的情况下，他们一定会相遇。
题解： public class Solution { public boolean hasCycle(ListNode head) { if (head == null || head.next == null) return false; ListNode fast = head.</description>
    </item>
    
    <item>
      <title>[数据结构]链表  删除排序链表中的重复元素</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</link>
      <pubDate>Thu, 16 Jan 2020 22:56:24 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</guid>
      <description>[数据结构]链表&amp;ndash;删除排序链表中的重复元素  题目描述 给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。
示例1： 输入：1-&amp;gt;1-&amp;gt;2
输出：1-&amp;gt;2
示例2： 输入：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;3
输出：1-&amp;gt;2-&amp;gt;3
算法： 1.从第一个元素开始，依次向后比较，若值相同，则直接指向下一个的下一个继续比较；若值不同，从该不同的值开始继续向后比较。
2.由于操作过程中如果使用头指针会导致头指针丢失，故用一个副本current代替head进行操作。
题解： class Solution { public ListNode deleteDuplicates(ListNode head) { ListNode current = head; while (current != null &amp;amp;&amp;amp; current.next != null) { if (current.val == current.next.val) { current.next = current.next.next; } else { current = current.next; } } return head; } } </description>
    </item>
    
    <item>
      <title>[数据结构]链表  合并两个有序链表</title>
      <link>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</link>
      <pubDate>Tue, 14 Jan 2020 22:49:29 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E9%93%BE%E8%A1%A8-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/</guid>
      <description>[数据结构]链表&amp;ndash;合并两个有序链表  题目描述 将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有结点组成的。
示例： 输入：1-&amp;gt;1-&amp;gt;4, 1-&amp;gt;3-&amp;gt;4
输出：1-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;4
算法(递归解法)： 1.如果两个链表有一个是空链表，那么不需要合并，直接返回非空链表。
2.否则，比较l1和l2两个链表哪个的头元素更小，选择更小的添加到结果里，如果两个链表都为空，则过程终止。
题解： class ListNode{ int val; ListNode next; ListNode (int x) { val = x; } } public class mergeTwoLists { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { if (l1 == null) { return l2; } else if (l2 == null) { return l1; } else if (l1.val &amp;lt; l2.val) { l1.next = mergeTwoLists(l1.next, l2); return l1; } else { l2.</description>
    </item>
    
    <item>
      <title>Hugo常用命令</title>
      <link>https://hexinliu.github.io/post/hugo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Mon, 13 Jan 2020 17:30:20 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/hugo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
      <description>Hugo 安装配置文档地址： https://blog.51cto.com/michaelkang/2364007 本文环境介绍 #hugo 版本 version Hugo Static Site Generator v0.54.0 linux/amd64 BuildDate: 2019-02-22T08:11:04Z #go 版本 go version go1.11.5 linux/amd64 #系统版本 more /etc/redhat-release CentOS Linux release 7.6.1810 (Core) #版本和环境详细信息 hugo env Hugo Static Site Generator v0.54.0 linux/amd64 BuildDate: 2019-02-22T08:11:04Z GOOS=&amp;quot;linux&amp;quot; GOARCH=&amp;quot;amd64&amp;quot; GOVERSION=&amp;quot;go1.11.5&amp;quot; 初始化站点 始化一个站点目录 www.datals.com
hugo new site /www.datals.com 目录结构介绍： cd /www.datals.com/ ll ▸ archetypes/ #包括内容类型，在创建新内容时自动生成内容的配置 ▸ content/ # 网站内容，全部使用markdown格式 ▸ layouts/ # 网站模板文件，决定内容如何呈现 ▸ static/ # 图片、css、js 等静态资源 ▸ themes/ # 存放主题 config.</description>
    </item>
    
    <item>
      <title>windows&#43;hugo&#43;github搭建个人博客</title>
      <link>https://hexinliu.github.io/post/df/</link>
      <pubDate>Mon, 13 Jan 2020 15:24:13 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/df/</guid>
      <description>windows + hugo + github 1.安装hugo hugo下载
1.根据自己情况下载对应版本，下载完成之后解压待用
2.创建一个文件夹，如在E盘创建hugo/bin,将解压出来的hugo.exe文件放入bin中
3.配置系统环境变量，将E:\hugo\bin添加到path环境变量中（如果没有在环境变量中添加hugo可执行文件的路径的话，每一次都要写全hugo.exe的路径或者切换到hugo所在的目录，过于麻烦。而将该路径添加到环境变量中之后，可以在cmd中随便使用hugo命令了）
注意：往path中添加的路径只要到hugo.exe所在的文件夹即可，不需要包含hugo.exe。
 以上工作进行完之后，检查是否操作成功，打开cmd，输入hugo version
若出现：
Hugo Static Site Generator v0.62.1-A1518704 windows/amd64 BuildDate: 2020-01-01T17:39:35Z 则说明安装且配置成功
2.安装git 这个过程中需要用到git，关于git的安装和使用，网上有很多资料，这里不提
git下载地址
git下载和解压成功后，可以在解压后的文件夹中发现两个可执行文件，一个git-bash.exe和一个git-cmd.exe。(区别：bash是linux风格的命令行，路径也是linux式的，可以使用windows命令和linux命令；cmd是windows风格的命令行，可以使用windows命令)
3.生成hugo博客站点 打开一个git命令行，进入E:\hugo下，敲命令:
hugo new site 文件名称(如:myblog) 执行完这条命令之后，会在hugo目录下生成一个名为myblog的站点文件夹
进入这个文件夹后，显示以下目录结构：
 archetypes (存放default.md,头文件的格式，每次新建文章默认显示的头部信息在此修改) content (存放博客文章，Markdown格式的文件) data (存放自定义或者导入的模板) layouts (存放网站的数据模板) static (存放图片,js,css等静态资源) themes (存放主题文件，每一个主题都是一个独立的文件夹) config.toml （网站配置文件，如baseURL=“&amp;hellip;”作用是无论是在本地还是发布出去，图片的路径都是相对于baseURL而言的）  4.下载主题 hugo主题下载地址
选定一个主题，点击进入，找到安装部分，如
复制以上命令，即可将主题clone到本地的themes文件夹下（themes下的每一个文件夹都是一个主题）
5.在本地启动站点 hugo server -t 已下载的主题名称(如prologue) --buildDrafts 这时候便可以对图中的地址进行访问了但这时候站点是空的，什么都没有
6.写一篇博客 回到E:\hugo\myblog&amp;gt;,执行
hugo new post/myFirstBlog.md 这个命令的意思是在content目录下，创建一个post目录，再在post目录下创建了一个名为myFirstBlog的博客文件，以后写博客就用这个命令(或者用hugo new gg.</description>
    </item>
    
    <item>
      <title>Maven</title>
      <link>https://hexinliu.github.io/post/maven/</link>
      <pubDate>Sun, 12 Jan 2020 22:17:12 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/maven/</guid>
      <description>Maven  1.什么是Maven
​	Maven是一个项目管理工具，它包含一个项目对象模型(POM:Project Object Model),一组标准集合，一个项目生命周期(Project Lifecycle)，一个依赖管理系统(Dependency Management System)，和用来运行定义在生命周期阶段(phase)中插件(plugin)目标(goal)的逻辑。
2.核心功能之依赖管理
3.核心功能之一键构建
​	*什么是构建：
​	构建是指项目从编译，测试，运行，打包，安装，部署整个过程都交给maven进行管理，这个过程称为构建。
​	*什么是一键构建
​	指的是整个构建过程中，使用maven一个命令可以轻松完成整个工作。
​	4.Maven的安装（下载Maven安装包并解压）
​	bin目录下的mvn：用于构建项目。
​	boot：Maven自身运行所需要的类加载器
​	conf中的settings.xml：对Maven进行配置时所使用的主要的配置文件
​	lib：Maven自身运行所需要的jar包
​
​	Maven的安装：
​	1.复制Maven解压后的目录，打开我的电脑，属性&amp;ndash;&amp;gt;高级系统设置&amp;ndash;&amp;gt;环境变量(系统变量中)，新建一个变量，变量名：MAVEN_HOME 变量值：所复制的目录。
​	2.进入Path环境变量，新建一个%MAVEN_HOME%\bin
​	3.Maven运行需要Java，必须确保环境变量中有JAVA_HOME。
​	4.检验安装是否成功：打开命令窗口，输入mvn -version或mvn -v，出现maven相关信息，即说明Maven安装成功。
5.修改仓库位置
​	进入Maven的config目录下的settings.xml，找到
​
&amp;lt;!--localRepository | The path to the local repository maven will use to store artifacts. | | Default: ${user.home}/.m2/repository &amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;/localRepository&amp;gt; 将其中的‘/path/to/local/repo’标签中的内容替换为自定义仓库的位置
6.仓库的分类
7.Maven项目标准目录结构</description>
    </item>
    
    <item>
      <title>Tomcat</title>
      <link>https://hexinliu.github.io/post/blog/</link>
      <pubDate>Sun, 12 Jan 2020 16:03:41 +0800</pubDate>
      
      <guid>https://hexinliu.github.io/post/blog/</guid>
      <description>Tomcat配置：
​	*部署项目的方式：
​	1.直接将项目放到webapps目录下
​	*简化部署：将项目打成一个war包，再将war包放置到webapps目录下(war包会自动解压)
​	2.配置conf/server.xml文件
​	在标签体中配置
​	例子：	​	*docBase:项目存放的路径
​	*path:虚拟目录
​	3.在conf\Catalina\localhost创建任意名称的xml文件，在文件中编写
​	​	*虚拟目录：xml文件的名称
​	*静态项目和动态项目
​	*目录结构
​	java动态项目的目录结构：
​	&amp;ndash;项目的根目录:
​	&amp;ndash;WEB-INF目录:
​	&amp;ndash;web.xml：web项目的核心配置文件
​	&amp;ndash;classes目录：放置字节码文件的目录
​	&amp;ndash;lib目录：放置依赖的jar包
IDEA与Tomcat相关配置
​	1.IDEA会为每一个Tomcat部署的项目单独建立一份配置文件
​	查看控制台的log：Using CATALINA_BASE: &amp;ldquo;C:\Users\16422.IntelliJIdea2019.1\system\tomcat\Tomcat_8_5_47_JavaWeb_Tomcat&amp;rdquo;
​	2.工作空间项目 和 Tomcat部署的web项目
​	*Tomcat真正访问的是“Tomcat部署的web项目”，“Tomcat部署的web项目”对应着“工作空间项目”的web目录下的所有资源
​	*WEB-INF目录下的资源不能被浏览器直接访问
​	3.断点调试：使用“小虫子”启动debug</description>
    </item>
    
  </channel>
</rss>